name: Windows

on:
  workflow_dispatch:

jobs:
  windows:
    name: Windows x64 Manual Build
    runs-on: windows-latest

    env:
      UPLOAD_ARTIFACT: "true"
      ONLY_CACHE: "false"
      PREPARE_PATH: "Telegram/build/prepare/prepare.py"
      TDESKTOP_BUILD_ARCH: "x64"
      TDESKTOP_BUILD_GENERATOR: ""
      TDESKTOP_BUILD_DEFINE: ""
      TDESKTOP_BUILD_API: "-D TDESKTOP_API_TEST=ON"
      ARTIFACT_NAME: "Telegram_x64"

    defaults:
      run:
        shell: cmd

    steps:
      - name: Prepare directories.
        run: |
          mkdir %userprofile%\TBuild\Libraries
          mklink /d %GITHUB_WORKSPACE%\TBuild %userprofile%\TBuild
          echo TBUILD=%GITHUB_WORKSPACE%\TBuild>>%GITHUB_ENV%

      - name: Get repository name.
        shell: bash
        run: echo "REPO_NAME=${GITHUB_REPOSITORY##*/}" >> $GITHUB_ENV

      - uses: ilammy/msvc-dev-cmd@v1.13.0
        name: Native Tools Command Prompt.
        with:
          arch: x64

      - name: Clone.
        uses: actions/checkout@v4
        with:
          submodules: recursive
          path: ${{ env.TBUILD }}\${{ env.REPO_NAME }}

      - name: Set up environment paths.
        shell: bash
        run: |
          echo "CACHE_KEY=$(sha256sum $TBUILD/$REPO_NAME/$PREPARE_PATH | awk '{ print $1 }')" >> $GITHUB_ENV
          git config --global user.email "you@example.com"
          git config --global user.name "Sample"

      - name: NuGet sources.
        run: |
          nuget sources Disable -Name "Microsoft Visual Studio Offline Packages"
          nuget sources Add -Source https://api.nuget.org/v3/index.json & exit 0

      - name: ThirdParty cache.
        id: cache-third-party
        uses: actions/cache@v4
        with:
          path: ${{ env.TBUILD }}\ThirdParty
          key: ${{ runner.OS }}-x64-third-party-${{ env.CACHE_KEY }}
          restore-keys: ${{ runner.OS }}-x64-third-party-

      - name: Libraries cache.
        id: cache-libs
        uses: actions/cache@v4
        with:
          path: ${{ env.TBUILD }}\Libraries
          key: ${{ runner.OS }}-x64-libs-${{ env.CACHE_KEY }}
          restore-keys: ${{ runner.OS }}-x64-libs-

      - name: Libraries.
        env:
          GYP_MSVS_OVERRIDE_PATH: 'C:\Program Files\Microsoft Visual Studio\2022\Enterprise\'
          GYP_MSVS_VERSION: 2022
        run: |
          cd %TBUILD%
          %REPO_NAME%\Telegram\build\prepare\win.bat silent

      - name: Free up some disk space.
        run: |
          cd %TBUILD%
          del /S Libraries\*.pdb
          del /S Libraries\*.pch
          del /S Libraries\*.obj

      - name: Telegram Desktop build.
        if: env.ONLY_CACHE == 'false'
        run: |
          cd %TBUILD%\%REPO_NAME%\Telegram

          call configure.bat ^
          %TDESKTOP_BUILD_GENERATOR% ^
          %TDESKTOP_BUILD_ARCH% ^
          %TDESKTOP_BUILD_API% ^
          -D CMAKE_CONFIGURATION_TYPES=Release ^
          -D CMAKE_COMPILE_WARNING_AS_ERROR=ON ^
          -D CMAKE_MSVC_DEBUG_INFORMATION_FORMAT= ^
          -D DESKTOP_APP_DISABLE_AUTOUPDATE=OFF ^
          -D DESKTOP_APP_DISABLE_CRASH_REPORTS=OFF ^
          %TDESKTOP_BUILD_DEFINE%

          cmake --build ..\out --config Release --parallel

      - name: Move artifact.
        if: (env.UPLOAD_ARTIFACT == 'true') || (github.ref == 'refs/heads/nightly')
        run: |
          set OUT=%TBUILD%\%REPO_NAME%\out\Release
          mkdir artifact
          move %OUT%\Telegram.exe artifact/
          move %OUT%\Updater.exe artifact/

      - uses: actions/upload-artifact@v4
        name: Upload artifact.
        if: (env.UPLOAD_ARTIFACT == 'true') || (github.ref == 'refs/heads/nightly')
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: artifact\
